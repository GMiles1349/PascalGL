2022-12-11
	- The project is undergoing a complete rewrite with a new structure
	and design philosophy. 
	
	- I want to move away from using Vec2's for
	most things, and instead use Vec3's to be able to specify depth/
	distance, though this will not be a required consideration on the
	user's part. This will just be used for sorting/depth testing when
	objects should be ordered by "height" or depth. It also provides
	easier implimentation of 3D drawing and a 3D camera system that can
	work with the same functions and shaders as would be used for 2D
	drawing.
	
	- I want to have TPGLSprite and new shape/geometry types inherit from
	a "drawable" class that will essentially just store an array of
	Vertices, UV coords, normals, etc..., so that I can move away from
	things like different "batch records" for each type of drawing. In
	this way, when I want to draw a simple circle, PGL will not need to
	check the specified render target already has different types of draws
	waiting to be rendered, but will instead just batch every draw call
	until the VBO size limit has been reached.
	
	- TPGLWindow will no longer wrap the window's framebuffer, but will
	instead own it's own FBO that "represents" what will ultimately drawn
	to the window. This will necesitate an additional blit to the window
	before a buffer swap is done, but will also allow me to not have to
	hack around flipping images to make sure that things are displayed
	"right side up" and make it easier to use faster copying functions
	like glCopyImageSubData and glCopyTex* on the GPU, as all FBO and
	texture data will be kept in standard OpenGL coordinates.
	Translation will have to be done between the user's "point of view"
	and the OpenGL format behind the scenes, but this isn't a big deal.
	
	- I will no longer rely on my own implimentation of windowing and
	context creation, but instead use GLFW and platform specific APIs
	so as to minimize the potential for bugs and increase portibility.

(------------------------------------------------------------------------)

2022-11-24
	- More work done on prototype 3D camera class implimentation.
	It is still not contained in a PGL source unit, so as to avoid
	having to rewrite any changes that would need to be made due to
	experimenting with the camera and 3D geometry.
	
	- For the moment, the decision has been made to go ahead and
	impliment the camera functionality into the main source units
	after a functioning and refinded prototype has been finished.
	The intent is for the TPGLState instance to contain a "default"
	camera that has a rotation, scale, and translation matrices that
	account for the size, rotation, and draw offset of the currently 
	bound framebuffer, and a view and orthographic projection matrices
	that are just identity matrices so as not to further transform
	the vertices passed to shaders. This will serve as the default
	2D camera, and all vertices will be drawn to the window according
	to the window space coordinates that the user normally passes to
	drawing functions.
	
	If a user wishes to impliment another camera, whether 2D or 3D,
	they will be able to create an instance of TPGLCamera and control
	it's projection type, direction, rotation, etc... Then, the user
	will be able to call PGL.UseCamera(var ACamera: TPGLCamera),
	passing in their own camera to replace the default. From then on,
	all drawing functions will use the camera that the user passed to
	draw objects, and vertices will be transformed according to that
	camera's matrices. It is as of now undecided if the current camera
	should be set at the TPGLState or the TPGLRenderTarget level, or
	if the user should be able to toggle between this behavior,
	specifying that PGL should use the "global" camera for all draw
	operations, or the per-TPGLRenderTarget camera.
	
	Having the option to toggle between a global or per-TPGLRenderTarget 
	camera offers the user the ability to render a 3D scene to one
	framebuffer, and then render a 2D UI overlay or similar to another
	framebuffer to be drawn over the 3D scene. However, going forward,
	there is going to a greater emphasis on simplicity for the user.
	It is important that the user is not overinnundated with options
	and forced to track the minute details of all of their render
	targets, cameras, etc... The primary benefit of the PGL library
	is that is abstracts the OpenGL API for the user, and tracks and
	handles the complex OpenGL "state" so that the user can focus
	on just placing objects on the screen where they want them
	without having to worry about bound framebuffer objects, VAO's,
	VBO's, textures, the active texture, uniforms, winding direction
	and everything else that goes into displaying batches of objects.
	Offering too many options, too much versitility introduces that
	complexity and state tracking, making the library more cumbersome
	and less accessible.
	
	There may be a sweet spot in the middle that allows flexibility
	with a minimal increase in complexity and verbosity, but for the 
	moment, I'm leaning toward having one active "global" camera,
	which will force the user to manual switch cameras any time they
	may wish to change it. In this way, there is still the functionality
	of being able to change the camera at will and render to different
	framebuffers with different cameras, just necesitating an extra
	line of code each time a camera is selected in. This does have the
	benefit of make the camera switch "visible" to the user, because
	the switch is not hidden in PGL functions that are abstraced away.

(------------------------------------------------------------------------)

2022-11-23
	- Been sick and job searching, not a lot has been done.
	
	- Over the last several days, began toying with implementing 3D
	functionality outside of the source units. Implemented a TPGLCamera
	class and wrote functions for inefficiently drawing arbitrary,
	textured and UV mapped geometry that accepts the Camera's stored
	View and Perspective/Orthographic matrices. Now, I am contemplating
	whether to impliment this 3D camera functionality into the project or
	to create a second project in the future that is 3D centric. Camera
	integration into the current project will most likely necessitate
	writing new and seperate drawing functions for current classes, or
	otherwise a rewrite of current drawing functions and/or reimplimentation
	of "drawable" classes.

(------------------------------------------------------------------------)

2022-11-09
	- Made minor changes to .bmp image load/write and moved functions to
new unit, glDrawImages.pas.

(------------------------------------------------------------------------)

2022-11-08
	- Finished initial implementation of .bmp image load/write. Functions
load images and convert to 32 bpp if the loaded image is 24 bpp. Functions
convert 32 bpp image data to 24 bpp and align the data to multiples of 4 bytes
to adhere to .bmp file conventions.

(------------------------------------------------------------------------)

2022-11-07
	- Started implimenting custom image loading and writing to eliminate
dependency on STB.

	- Updated "Sprite Batch" and "Texture Default" shaders. Made changes
to avoid shader recompiles at runtime.

	- Moved array "ProgramList" for list of compiled shaders to be a
memeber of TPGLState and not accessible by the user.

	- Changed how instances of TPGLProgram are added to the "ProgramList"
array. 

(------------------------------------------------------------------------)

2022-11-06
	- Made progress on converting all Type, Class, Record, Procedure and
Function, and variable names to adhere to Pascal/Delphi naming conventions.

	- Made progress on changing Procedure and Function parameter names
in order to adhere to Pascal/Delphi naming conventions.

	- Implimented functionality for the user to change the OpenGL
glBlendFunc at the TPGLRenderTarget level. Added fBlendFactors array to
TPGLRenderTarget and procedure SetBlendFactors() which accepts 2 enum values
form new TPGLBlendValue(needs to be renamed) set. The use of the TPGLBlendValue 
set is intended to give the user a way to "look up" the 
blending values via dot operator at design time. When a TPGLRenderTarget
calls MakeCurrentTarget before executing a draw batch, the OpenGL glBlendFunc
is updated to match the fBlendFactors values if they differ from the current
glBlendFunc state. This allows the user to better control how blending is
handled on a per pixel basis if they choose to. By default, each TPGLRenderTarget's
fBlendFactors values are SOURCE_ALPHA and ONE_MINUS_SOURCE_ALPHA, which are
the same as GL_SRC_ALPHA and GL_ONE_MINUS_SRC_ALPHA respectively. 
